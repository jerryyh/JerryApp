package com.jerry.mobile.designpattern.action.templatemethod;

/**
 * @author jerry
 * @date 2021/5/26
 * Description:模板方法（Template method）：相当于那个标准的流程，定义基本方法的执行次序的一个方法。
 */
public abstract class AbstractClass {
    /**
     * 模板方法
     */
    public final void templateMethod() {
        op1();
        op2();
        op3();
    }

    /*
     * 基本方法
     */

    /**
     * 基本具体方法
     */
    public void op1() {
        System.out.println("op1");
    }

    /**
     * 基本抽象方法
     */
    public abstract void op2();

    /**
     * 钩子方法
     */
    public void op3() {

    }

}

/**
 *组成要素
 *
 * 抽象类：其实就是一个抽象模板，定义并实现了一个模板方法。这个模板方法一般是一个具体的方法，它给出了一个顶级逻辑的骨架。而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
 * 具体子类：实现父类所定义的一个或多个抽象方法。每一个抽象类都可以有任意多个具体子类与之对应，而每一个具体子类都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。
 *
 *钩子方法
 * 引入钩子方法主要就是让我们可以通过子类可以控制父类的行为，我们通过覆盖父类的一些方法，因为多态让父类引用子类对象的时候，使用子类覆盖的方法。
 * 钩子方法我们写钩子方法可以有2类：
 *
 * 返回boolean类型，方法名一般是isXXX()。这样我们可以在模板方法中通过这个钩子方法判断来决定执行的逻辑，
 * 一个空实现的方法。这样我们父类模板方法也可以使用父类的默认基本方法，空的相当于执行时直接跳过，一旦我们想对该点插入逻辑，子类提供实现即可。
 *
 * 作者：長安
 * 链接：https://juejin.cn/post/6871270815095062536
 * 来源：掘金
 * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 *
 */
